// <auto-generated />
using DepositDatabaseCore.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DepositDatabaseCore.Migrations
{
    [DbContext(typeof(DepositDbContext))]
    [Migration("20171217194319_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DepositDatabaseCore.Model.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.Card", b =>
                {
                    b.Property<string>("Id");

                    b.Property<decimal>("Balance");

                    b.Property<byte>("CurrencyId");

                    b.Property<int?>("CurrencyId1");

                    b.Property<string>("ExpirationMonth");

                    b.Property<string>("ExpirationYear");

                    b.Property<string>("SecretCode");

                    b.Property<string>("UserOwnerId");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId1");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.CardHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardId");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Desription");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardHistory");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance");

                    b.Property<string>("CardId");

                    b.Property<byte>("DepositStateId");

                    b.Property<int?>("DepositStateId1");

                    b.Property<byte>("DepositTermId");

                    b.Property<int?>("DepositTermId1");

                    b.Property<byte>("DepositWayOfAccumulationId");

                    b.Property<int?>("DepositWayOfAccumulationId1");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InitialAmount");

                    b.Property<DateTime?>("LastInterestPaymentDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UserOwnerId");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("DepositStateId1");

                    b.HasIndex("DepositTermId1");

                    b.HasIndex("DepositWayOfAccumulationId1");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.DepositState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DepositStates");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.DepositTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrencyId");

                    b.Property<decimal>("InterestRate");

                    b.Property<byte>("Months");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("DepositTerms");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.DepositWayOfAccumulation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("DepositWaysOfAccumulation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.Card", b =>
                {
                    b.HasOne("DepositDatabaseCore.Model.Currency", "Currency")
                        .WithMany("Cards")
                        .HasForeignKey("CurrencyId1");

                    b.HasOne("DepositDatabaseCore.Model.AspNetUser", "UserOwner")
                        .WithMany("Cards")
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.CardHistory", b =>
                {
                    b.HasOne("DepositDatabaseCore.Model.Card", "Card")
                        .WithMany("CardHistoryRecords")
                        .HasForeignKey("CardId");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.Deposit", b =>
                {
                    b.HasOne("DepositDatabaseCore.Model.Card", "Card")
                        .WithMany("Deposits")
                        .HasForeignKey("CardId");

                    b.HasOne("DepositDatabaseCore.Model.DepositState", "DepositState")
                        .WithMany("Deposits")
                        .HasForeignKey("DepositStateId1");

                    b.HasOne("DepositDatabaseCore.Model.DepositTerm", "DepositTerm")
                        .WithMany("Deposits")
                        .HasForeignKey("DepositTermId1");

                    b.HasOne("DepositDatabaseCore.Model.DepositWayOfAccumulation", "DepositWayOfAccumulation")
                        .WithMany("Deposits")
                        .HasForeignKey("DepositWayOfAccumulationId1");

                    b.HasOne("DepositDatabaseCore.Model.AspNetUser", "UserOwner")
                        .WithMany("Deposits")
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("DepositDatabaseCore.Model.DepositTerm", b =>
                {
                    b.HasOne("DepositDatabaseCore.Model.Currency", "Currency")
                        .WithMany("DepositTerms")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DepositDatabaseCore.Model.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DepositDatabaseCore.Model.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DepositDatabaseCore.Model.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DepositDatabaseCore.Model.AspNetUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
